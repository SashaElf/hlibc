hlibc

DESCRIPTION:
------------

	hlibc is an experimental libc targeted at the linux kernel's syscall
	ABI. It is a standalone libc which supports i386, x86_64 and arm 
	architectures. hlibc can be compiled with either gcc or the llvm
	clang compiler.


BUILDING:
---------

	hlibc contains a shell wrapper for gcc called gcc-wrap. This allows it 
	to be easily installed and used from your home directory without the 
	need for root privilege.

		cd hlibc 
		./configure --prefix=/home/$USER/buildarea 
		make 
		make install

	Test the installation:

		cd /home/$USER/buildarea 
		./bin/gcc-wrap tests/pow_test.c -static

	Make sure you are using the -static argument whenever you compile
	anything using the gcc wrapper because hlibc only supports static
	linking at this time. Or delete the libc.so stub in the lib/ directory
	which will cause the compiler to statically link to the libc.a by
	default. 


STRUCTURE:
----------

	musllibc/
		Source code original to the musl C library

	hlibc/
		Source code original to the hlibc C library.

	fdlibm/
		Source code original to the Sun libm math library

	tests/
		Various test binaries

	crt/
		Crt stuff startup assembly code

	include/
		Header files.

	arch/
		Architecture specific header files.

	tools/
		several tools including the gcc-wrap wrapper script


AUTOMATIC TESTING:
------------------
	
	Use the following instructions to retrieve, build and run hlibc 
	and the hlibc test suite.

		git clone https://git.zv.io/me/hlibc.git
		cd hlibc
		make gcctest

	If all ran successfully there should be no significant errors and
	a confirmation notice containing the results of the test suite 
	will be printed to screen looking something like this:

	==========COMPILING TESTS ===================================
	=============================================================
	==========TEST RESULT START==================================
	This number should be (16.000000): 16.000000    (4^3)
	This number should be (15.580524): 15.580524    (3.3^2.3)
	The `cat' utility successfully copied a file
	The `malloc_driver' test utility successfully iterated through a d ....
	The `popen_driver' test utility successfully ran `du' on a directo ....
	The `printf_driver' test utility successfully created and copied a ....
	The `popen-to-file' driver test utility successfully ran `du' on a ....
	============================================================


	If any compiler or linker errors occur within this report then the libc
	has changed and likely regressed or otherwise lost a functionality.

	If you wish to add a new test to the test suite simply put the program
	under tests/ and it will be compiled along with the other tests. There
	are no automatic mechanisms for running supplied tests. As of this time
	each actual test (and diff if required) must be scripted into 
	tools/build.sh.


USING LLVM/CLANG:
-----------------

	Clang does work with hlibc. However, the wrapper script is still
	experimental. It can be automatically tested by running;

		make clangtest


ROADMAP:
--------

	Write more tests in C, add them to tests/ and script them into build.sh
	Scripting should be kept dead simple. Utility code can be taken from 
	arbsh/posix if new unique C code is needed.

	Remove and rewrite strtok.

	Add an fdopen() function and redesign popen() to use it. 

	Redesign the syscall interface to use unique code and start removing the
	remnants of musllibc/.

	Add more string functions, essentially finishing hlibc/string for non-
	wide character support. 

	Support for properly printing and rounding of floats / doubles. When 
	this is done the printf test in tools/build.sh can be uncommented. In 
	the meantime that test can be used to finish _print_inter.c.

	Rewrite getopt(), write tests for getopt(). This getopt version was
	written by Henry Spencer and is not unique to hlibc.

	Address proper switching between unbuffered, line buffered and buffered
	modes inside of _fillbuf.c and _flushbuf.c. Register them before main
	and then with the internal atexit-style handlers.

	Fix the experimental MIPS port. Popen and stat are not working 
	correctly.
	

REVISION CONTROL:
-----------------

	https://github.com/cmgraff/hlibc

	Or you can use the mirror generously hosted by contributor Zach van Rijn

	https://git.zv.io/me/hlibc


DEVELOPERS:
-----------

	One of the simplest ways to contribute to hlibc is to make patches
	using `git'. They can be constructed as follows:

		git add hlibc/path/to/work.c
		git commit -m "something new added"
		git format-patch -1 --stdout > work.patch

	After the patch is constructed it can be handed over via a pastebin by
	posting the work on #hlibc on irc.freenode.net.


WEB HOME:
---------

	http://www.csit.parkland.edu/~cgraff1/hlibc


CONTACT:
--------

	cm0graff@gmail.com


IRC:
----

	#hlibc on irc.freenode.net
