hlibc

DESCRIPTION:
------------

	hlibc is an experimental libc targeted at the linux kernel's syscall
	ABI. It is a standalone libc which supports i386, x86_64 and arm 
	architectures. hlibc can be compiled with either gcc or the llvm
	clang compiler.


BUILDING:
---------

	hlibc contains a shell script wrapper for gcc called gcc-wrap. This
	allows it to be easily installed and used from your home directory
	without the need for root privilege.

		cd hlibc 
		./configure --prefix=/home/$USER/buildarea 
		make 
		make install

	Test the installation:

		cd /home/$USER/buildarea 
		./bin/gcc-wrap tests/pow_test.c -static

	Make sure you are using the -static argument whenever you compile
	anything using the gcc wrapper because hlibc only supports static
	linking at this time. Or delete the libc.so stub in the lib/ directory
	which will cause the compiler to statically link to the libc.a by
	default.


STRUCTURE:
----------

	musllibc/
		Source code original to the musl C library

	hlibc/
		Source code original to the hlibc C library.

	fdlibm/
		Source code original to the Sun libm math library

	tests/
		Various test binaries

	crt/
		Crt stuff startup assembly code

	include/
		Header files.

	arch/
		Architecture specific header files.

	tools/
		several tools including the gcc-wrap wrapper script


LINKING TO OUTSIDE LIBC:
------------------------

	Many people wish to know the internal magic behind using the gcc-wrap
	wrapper script. Instead of going into much detail I will offer some
	instructions on linking against an outside libc (namely ours) without
	using this wrapper:

		git clone https://www.github.com/cmgraff/hlibc 
		cd hlibc 
		./configure 
		make

		gcc -nostdinc -nostdlib -I./include tests/cat.c lib/Scrt1.o lib/libc.a -o cat

			or  ...

		gcc -nostdinc -nostdlib -I./include tests/cat.c lib/crt*.o  lib/libc.a -o cat

		./cat

	Basically we tell the compiler to "-nostdinc (do not include any host 
	headers)", "'-nostdlib' (don't include any host libraries)" "-I./include
	 (use our header files)" and then finally "(link in our crt stuff) 
	lib/Scrt1.o" and "(link in our libc) lib/libc.a" 

	The libc itself is of course at lib/libc.a But the "crt stuff" crt 
	start up files are also needed. These files are written in assembly 
	code and their source code is located at hlibc/crt/*.


AUTOMATIC TESTING:
------------------
	
	Use the following instructions to retrieve, build and run hlibc 
	and the hlibc test suite.

		git clone https://www.github.com/cmgraff/hlibc
		cd hlibc
		make test

	If all ran successfully there should be no significant errors and
	a confirmation notice containing the results of the test suite 
	will be printed to screen looking something like this:

		==========COMPILING TEST SUITE==============================
		============================================================
		==========TEST SUITE START==================================
		This number should be (16.000000): 16.000000    (4^3)
		This number should be (15.580524): 15.580524    (3.3^2.3)
		The `cat' utility successfully copied a file
		The `malloc_driver' test utility successfully iterated th..
		The `popen_driver' test utility successfully ran `du' on..
		============================================================
		============================================================
		   If all was successful your compiler will be located at:
		              ./usr/bin/gcc-wrap
		============================================================

	If any compiler or linker errors occur within this report then the libc
	has changed and likely regressed or otherwise lost a functionality.

	If you wish to add a new test to the test suite simply put the program
	under tests/ and it will be compiled along with the other tests. There
	are no automatic mechanisms for running supplied tests. As of this time
	each actual test (and diff if required) must be scripted into 
	tools/build.sh.


USING LLVM/CLANG:
-----------------

	llvm/clang can be used to build hlibc. If your default libc happens
	to be something other than clang then you can set CC as an environment
	variable.

		CC=clang ./configure

		CC=clang make

		make install

	llvm/clang does not work with a specs file wrapper so the gcc-wrap
	conveniece compiler wrapper can not be used at this time. Instead
	one must link to the libc.a "by hand" as follows:

		clang -nostdinc -nostdlib -I./include tests/cat.c lib/crt*.o lib/libc.a -o cat

ROADMAP:
--------

	Opacify the stdio structure 
	(easy)

	Write more tests in C, add them to tests/ and script them into build.sh
	Scripting should be kept dead simple. No comments, no new ideas are 
	needed. Only dead simple testing strategies. Focus should be kept on 
	tests for string functions. Utility code can be taken from arbsh/posix 
	if new, unique C code is needed.
	(easy)

	Remove and rewrite strtok
	(intermediate)

	Add an fdopen() function and redesign popen() to use it
	(advanced)

	Redesign the syscall interface to use unique code and start removing the
	remnants of musllibc/
	(advanced)

	Add more string functions, essentially finishing hlibc/string for non-
	wide character support.
	(intermediate)

	Support for properly printing and rounding of floats / doubles.
		When this is done the printf test in tools/build.sh can be
		uncommented. In the meantime that test can be used to finish
		_print_inter
	(extremely advanced)

	Update the arm port and use it to add the aarch64 target.
	(advanced)

	Rewrite getopt(), write tests for getopt(). This getopt version was
	written by Henry Spencer and is not unique to hlibc.
	(intermediate)

	Address proper switching between unbuffered, line buffered and buffered
	modes inside of _fillbuf.c and _flushbuf.c. Register them before main
	and then with the internal atexit-style handlers.
	(advanced)

	Rewrite hlibc/malloc using the existing one as an example. Using a simple
	linked list structure. Use K&R2 as a reference. This malloc is from a 
	forum post and needs to be rewritten ASAP.

	Get rid of the gcc wrapper program, and rewrite it in POSIX shell to use
	either clang or gcc.


REVISION CONTROL:
-----------------

	https://github.com/cmgraff/hlibc

	Or you can use the mirror generously hosted by contributor Zach van Rijn

	https://git.zv.io/me/hlibc


WEB HOME:
---------

	http://www.csit.parkland.edu/~cgraff1/hlibc


CONTACT:
--------

	cm0graff@gmail.com


IRC:
----

	#hlibc on irc.freenode.net


