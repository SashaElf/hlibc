#!/bin/sh

menu () {
cat <<EOF

hlibc 2018, CM Graff et al.

  --prefix=PREFIX         main installation prefix [/usr/local/hlibc] 

EOF
exit 0
}

print () {
	printf -- "%s\n" "$*"
}

fatal()
{
        (>&2 print "fatal" "$*")
        exit 1
}

fnmatch () { 
	eval "case \"\$2\" in $1) return 0 ;; *) return 1 ;; esac" ; 
}

cmdexists () { 
	type "$1" >/dev/null 2>&1
}

detectcommand()
{
        printf "trying $i .. "
        if command -v "$1" >/dev/null 2>&1
        then    print "yes"
                return 0
        else    print "no"
                return 1
        fi
}

setdir () {
	if eval "test -z \"\${$1}\""
	then	eval "$1=\$2"
	else	eval "fnmatch '*/' \"\${$1}\"" && eval "$1=\${$1%/}"
	fi
}

tryflag () {
	printf "checking whether compiler accepts %s... " "$2"
	print "typedef int x;" > "$tmpc"
	if "$CC" "$2" -c -o /dev/null "$tmpc" 2>/dev/null
	then	print "yes"
		eval "$1=\"\${$1} \$2\""
		eval "$1=\${$1# }"
		return 0
	else	print "no"
		return 1
	fi
}

CFLAGS_C99FSE=
CFLAGS_AUTO=
prefix=
exec_prefix=
bindir=
libdir=
includedir=
syslibdir=
target=
debug=no
warnings=
shared=yes
static=yes

for arg ; do
	case "$arg" in
		--help) menu ;;
		--prefix=*) prefix=${arg#*=} ;;
		-* ) print "$0: unknown option $arg" ;;
		CC=*) CC=${arg#*=} ;;
		CFLAGS=*) CFLAGS=${arg#*=} ;;
		CPPFLAGS=*) CPPFLAGS=${arg#*=} ;;
		LDFLAGS=*) LDFLAGS=${arg#*=} ;;
		*=*) ;;
		*) target=$arg ;;
	esac
done

setdir prefix /usr/local/hlibc
setdir exec_prefix '$(prefix)'
setdir bindir '$(exec_prefix)/bin'
setdir libdir '$(prefix)/lib'
setdir includedir '$(prefix)/include'
setdir syslibdir '/lib'


# tempfile
tmpc="./temporary_work_file"
rm "$tmpc"

print "Attempting to detect a C compiler ..."
if [ -z "${CC}" ]
then    for i in unlikely-cc c99 gcc cc clang pcc tcc
        do      if detectcommand "$i"
                then    CC="$i"
                        break
                fi
        done
        if [ -z "${CC}" ]
        then    fatal "No compiler was able to be found. Giving up."
        fi
else    detectcommand "${CC}"
fi


# Find target architecture
#printf "checking target system type... "
test -n "$target" || target=$("$CC" -dumpmachine 2>/dev/null) || target=unknown
print "%s" "$target"

case "$target" in
	arm*) ARCH=arm
		;;
	aarch64*) ARCH=aarch64
		;;
	i?86*) ARCH=i386
		;;
	x86_64*) ARCH=x86_64
		;;
	unknown) fatal "Architecture not found!!"
		;;
	*) fatal "Unknown architecture !!"
		;;
esac


# Try to get a conforming C99 freestanding environment
tryflag CFLAGS_C99FSE -std=c99
tryflag CFLAGS_C99FSE -nostdinc
tryflag CFLAGS_C99FSE -ffreestanding

# Setup basic default CFLAGS: debug, optimization, and -pipe 
if ! fnmatch '-O*|*\ -O*' "$CFLAGS_AUTO $CFLAGS"
then	tryflag CFLAGS_AUTO -Os || tryflag CFLAGS_AUTO -O2
fi
test "x$debug" = xyes && CFLAGS_AUTO="-g"
tryflag CFLAGS_AUTO -pipe

# nasty i486 hack
if test "$ARCH" = "i386"
then	fnmatch '-march=*|*\ -march=*' "$CFLAGS" || tryflag CFLAGS_AUTO -march=i486
	fnmatch '-mtune=*|*\ -mtune=*' "$CFLAGS" || tryflag CFLAGS_AUTO -mtune=generic
fi


# Some patched GCC builds have these defaults messed up...
tryflag CFLAGS_AUTO -fno-stack-protector
tryflag DISABLE_PIE -fno-pie
tryflag DISABLE_PIE -no-pie

print "Generating a config.mak for the main Makefile"

exec 3>&1 1>config.mak

cat << EOF
# Automatically generated

ARCH = $ARCH
prefix = $prefix
exec_prefix = $exec_prefix
bindir = $bindir
libdir = $libdir
includedir = $includedir
syslibdir = $syslibdir
CC = $CC
CFLAGS = $CFLAGS_AUTO $CFLAGS
CFLAGS_C99FSE = $CFLAGS_C99FSE
LDFLAGS = $LDFLAGS_AUTO $LDFLAGS
DISABLE_PIE = $DISABLE_PIE

EOF
test "x$static" = xno && print "STATIC_LIBS ="
test "x$wrapper" = xno && print "ALL_TOOLS ="
test "x$wrapper" = xno && print "TOOL_LIBS ="
exec 1>&3 3>&-


# Ad hoc handling of transparent compiler script
case "$CC" in
	*clang*) print "CC_IS_CLANG = yes" >> config.mak
		print "" >> config.mak
	;;
esac

print "done"

