#!/bin/sh

usage () {
cat <<EOF

hlibc 2018, CM Graff et al.

  --prefix=PREFIX         main installation prefix [/usr/local/hlibc] 

EOF
exit 0
}

# Helper functions

echo () { printf "%s\n" "$*" ; }
fail () { echo "$*" ; exit 1 ; }
fnmatch () { eval "case \"\$2\" in $1) return 0 ;; *) return 1 ;; esac" ; }
cmdexists () { type "$1" >/dev/null 2>&1 ; }
trycc () { test -z "$CC" && cmdexists "$1" && CC=$1 ; }

setdir () {
	if eval "test -z \"\${$1}\""
	then	eval "$1=\$2"
	else	eval "fnmatch '*/' \"\${$1}\"" && eval "$1=\${$1%/}"
	fi
}

tryflag () {
	printf "checking whether compiler accepts %s... " "$2"
	echo "typedef int x;" > "$tmpc"
	if "$CC" "$2" -c -o /dev/null "$tmpc" 2>/dev/null
	then	printf "yes\n"
		eval "$1=\"\${$1} \$2\""
		eval "$1=\${$1# }"
		return 0
	else	printf "no\n"
		return 1
	fi
}

trymultiflag () {
	printf "checking whether compiler accepts %s... " "$2"
	echo "typedef int x;" > "$tmpc"
	if "$CC" $2 -c -o /dev/null "$tmpc" 2>/dev/null
	then	printf "yes\n"
		eval "$1=\"\${$1} \$2\""
		eval "$1=\${$1# }"
		return 0
	else	printf "no\n"
		return 1
	fi
}

tryldflag () {
	printf "checking whether linker accepts %s... " "$2"
	echo "typedef int x;" > "$tmpc"
	if "$CC" -nostdlib -shared "$2" -o /dev/null "$tmpc" 2>/dev/null
	then	printf "yes\n"
		eval "$1=\"\${$1} \$2\""
		eval "$1=\${$1# }"
		return 0
	else	printf "no\n"
		return 1
	fi
}

# Beginning of actual script

STACK_ALIGNMENT=
CFLAGS_C99FSE=
CFLAGS_AUTO=
LDFLAGS_AUTO=
prefix=
exec_prefix=
bindir=
libdir=
includedir=
syslibdir=
target=
debug=no
warnings=
shared=yes
static=yes

for arg ; do
	case "$arg" in
		--help) usage ;;
		--prefix=*) prefix=${arg#*=} ;;
		-* ) echo "$0: unknown option $arg" ;;
		CC=*) CC=${arg#*=} ;;
		CFLAGS=*) CFLAGS=${arg#*=} ;;
		CPPFLAGS=*) CPPFLAGS=${arg#*=} ;;
		LDFLAGS=*) LDFLAGS=${arg#*=} ;;
		*=*) ;;
		*) target=$arg ;;
	esac
done

setdir prefix /usr/local/hlibc
setdir exec_prefix '$(prefix)'
setdir bindir '$(exec_prefix)/bin'
setdir libdir '$(prefix)/lib'
setdir includedir '$(prefix)/include'
setdir syslibdir '/lib'

#
# Get a temp filename we can use
#
i=0
set -C
while :
do	i=$(($i+1))
	tmpc="./conf$$-$PPID-$i.c"
	2>/dev/null > "$tmpc" && break
	test "$i" -gt 50 && fail "$0: cannot create temporary file $tmpc"
done
set +C
trap 'rm "$tmpc"' EXIT INT QUIT TERM HUP

#
# Find a C compiler to use
#
printf "checking for C compiler... "
trycc gcc
trycc c99
trycc cc
trycc clang
printf "%s\n" "$CC"
test -n "$CC" || { echo "$0: cannot find a C compiler" ; exit 1 ; }

#
# Find the target architecture
#
printf "checking target system type... "
test -n "$target" || target=$("$CC" -dumpmachine 2>/dev/null) || target=unknown
printf "%s\n" "$target"

#
# Convert to just ARCH
#
case "$target" in
	arm*) ARCH=arm ;;
	aarch64*) ARCH=aarch64 ;;
	i?86*) ARCH=i386 ;;
	x86_64*) ARCH=x86_64 ;;
	unknown) fail "$0: unable to detect target arch; try $0 --target=..." ;;
	*) fail "$0: unknown or unsupported target \"$target\"" ;;
esac

#
# Try to get a conforming C99 freestanding environment
#
tryflag CFLAGS_C99FSE -std=c99
tryflag CFLAGS_C99FSE -nostdinc
tryflag CFLAGS_C99FSE -ffreestanding

#
# Setup basic default CFLAGS: debug, optimization, and -pipe
#
if ! fnmatch '-O*|*\ -O*' "$CFLAGS_AUTO $CFLAGS"
then	tryflag CFLAGS_AUTO -Os || tryflag CFLAGS_AUTO -O2
fi
test "x$debug" = xyes && CFLAGS_AUTO="-g"
tryflag CFLAGS_AUTO -pipe

#
# On x86, make sure we don't have incompatible instruction set
# extensions enabled by default. This is bad for making static binaries.
# We cheat and use i486 rather than i386 because i386 really does not
# work anyway (issues with atomic ops).
#
if test "$ARCH" = "i386"
then	fnmatch '-march=*|*\ -march=*' "$CFLAGS" || tryflag CFLAGS_AUTO -march=i486
	fnmatch '-mtune=*|*\ -mtune=*' "$CFLAGS" || tryflag CFLAGS_AUTO -mtune=generic
fi


# Some patched GCC builds have these defaults messed up...
tryflag CFLAGS_AUTO -fno-stack-protector
tryflag DISABLE_PIE -fno-pie
tryflag DISABLE_PIE  -no-pie
tryldflag LDFLAGS_AUTO -Wl,--hash-style=sysv

printf "generating the config.mak (to be sourced by Makefile)... "

exec 3>&1 1>config.mak

cat << EOF
# This version of config.mak was generated by configure
# Any changes made here will be lost if configure is re-run
ARCH = $ARCH
prefix = $prefix
exec_prefix = $exec_prefix
bindir = $bindir
libdir = $libdir
includedir = $includedir
syslibdir = $syslibdir
CC = $CC
CFLAGS = $CFLAGS_AUTO $CFLAGS
CFLAGS_C99FSE = $CFLAGS_C99FSE
CPPFLAGS = $CPPFLAGS
LDFLAGS = $LDFLAGS_AUTO $LDFLAGS
DISABLE_PIE = $DISABLE_PIE

EOF
test "x$static" = xno && echo "STATIC_LIBS ="
test "x$shared" = xno && echo "SHARED_LIBS ="
test "x$wrapper" = xno && echo "ALL_TOOLS ="
test "x$wrapper" = xno && echo "TOOL_LIBS ="
exec 1>&3 3>&-


# Ad hoc handling of transparent compiler script
case "$CC" in
	*clang*) echo "CC_IS_CLANG = yes" >> config.mak
		echo "" >> config.mak
	;;
esac

printf "done\n"

