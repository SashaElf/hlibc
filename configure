#!/bin/sh

# hlibc configure script

print()
{
	printf -- "%s\n" "$*"
}

menu()
{
print "hlibc 2016-2018, CM Graff et al.

	--prefix=PREFIX         main installation prefix [/usr/local/hlibc] 
"
exit 0
}

fatal()
{
        (>&2 print "fatal" "$*")
        exit 1
}

detectcommand()
{
        printf "trying $i .. "
        if command -v "$1" >/dev/null 2>&1
        then    print "yes"
                return 0
        else    print "no"
                return 1
        fi
}

inspect_compiler()
{
	printf "trying %s .. " "$2"
	print "long y = 1;" > "$temporary_file"
	print "double z = 0;" >> "$temporary_file"
	if "$CC" "$2" -c -o .temporary "$temporary_file" 2> .temporary
	then	print "yes"
		eval "$1=\"\${$1} \$2\""
		eval "$1=\${$1# }"
		return 0
	else	print "no"
		return 1
	fi
}


OPERATING_SYSTEM="linux"
FREESTANDING=
CFLAGS_SUPPLEMENT=
prefix="/usr/local/hlibc"
architecture=

for i in "$@"
do	case "$i" in
		--help)
			menu
			;;
		--prefix=*)
			prefix=${i#*=}
			;;
		*)
			fatal "$i is not a valid option !!"
			;;
	esac
done

# Detect the operating system
OS_DIRTY_STR=$(uname -a)

case $OS_DIRTY_STR in
	*linux*|*Linux*)
		OPERATING_SYSTEM="linux"
			;;
	*FreeBSD*|*freebsd*|*Freebsd*)
		print "Note that the FreeBSD 'c99' command has a bug and won't accept '-dumpmachine'"
		OPERATING_SYSTEM="freebsd"
			;;
	*NetBSD*|*netbsd*|*Netbsd*)
		print "NetBSD is not fully supported."
		print "It will build, and likely works, however NetBSD needs a note in the ELF headers"
		print "which hlibc has no functionality to provide at this time."
		OPERATING_SYSTEM="netbsd"
			;;
	*OpenBSD*|*openbsd*|*Openbsd*)
		OPERATING_SYSTEM="openbsd"
			;; 
esac

# Obtain a temporary file
temporary_file="./temporary_work_file"
[ -f "${temporary_file}" ] && rm "$temporary_file"

print "Attempting to detect a C compiler ..."
if [ -z "${CC}" ]
then    for i in unlikely-cc gcc cc clang c99 pcc tcc
        do      if detectcommand "$i"
                then    CC="$i"
                        break
                fi
        done
        if [ -z "${CC}" ]
        then    fatal "No compiler was able to be found. Giving up."
        fi
else    detectcommand "${CC}"
fi

# Find target architecture
printf "Automatically detecting the computer architecture: "
architecture=$("$CC" -dumpmachine 2>/dev/null)
print "$architecture"

case "$architecture" in
	*arm64*|*aarch64*)
		ARCH="aarch64"
		;;
	*amd64*|x86_64*)
		ARCH="x86_64"
		;;
	*)
		fatal "Unknown architecture !!"
		;;
esac


# Obtain a freestanding C99 env
inspect_compiler FREESTANDING -ffreestanding
inspect_compiler FREESTANDING -std=c99
inspect_compiler FREESTANDING -nostdinc
inspect_compiler CFLAGS_SUPPLEMENT -pipe
inspect_compiler CFLAGS_SUPPLEMENT -Os

# Correct broken compiler installations
inspect_compiler CFLAGS_SUPPLEMENT -fno-stack-protector
inspect_compiler DISABLE_PIE -fno-pie
inspect_compiler DISABLE_PIE -no-pie

# Create the config.mak
print "Generating a config.mak for the main Makefile"

print "
# Automatically generated
ARCH = $ARCH
prefix = $prefix
CC = $CC
CFLAGS += $CFLAGS_SUPPLEMENT $CFLAGS
FREESTANDING += $FREESTANDING
DISABLE_PIE += $DISABLE_PIE
OPERATING_SYSTEM += $OPERATING_SYSTEM
" > config.mak

# Adjust the compiler wrapper if clang is being used
case "$CC" in
	*clang*)
		print "CC_IS_CLANG = yes" >> config.mak
		print "" >> config.mak
		;;
esac

# Clean up and report
rm "$temporary_file" .temporary

print "done"


